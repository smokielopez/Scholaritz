const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };

  const generationConfig2 ={

    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",

};
  
  
    export const courseOutlineAIModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "generate a study material for Python for Exam and level of difficulty wil be Easy with summary of course,List of chapters along with summary for each chapter,All result\nJSON format "},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"courseTitle\": \"Python Fundamentals for Beginners (Exam Prep)\",\n  \"courseDifficulty\": \"Easy\",\n  \"courseSummary\": \"This course provides a foundational understanding of Python programming, covering basic syntax, data types, control flow, and essential libraries. It's designed for individuals with little to no prior programming experience and prepares them for introductory-level Python exams.\",\n  \"chapters\": [\n    {\n      \"chapterNumber\": 1,\n      \"chapterTitle\": \"Introduction to Python\",\n      \"chapterSummary\": \"This chapter introduces Python, its history, key features, and why it's a popular programming language. It covers installation and basic setup of the Python environment and introduces the concept of running Python code.\",\n      \"topicsCovered\": [\n        \"What is Python?\",\n        \"History and features of Python\",\n        \"Python's applications\",\n        \"Installing Python (Windows, macOS, Linux)\",\n        \"Using the Python interpreter\",\n        \"Writing and running your first Python program\",\n        \"Basic Python syntax\"\n      ],\n      \"exampleCode\": [\n        \"print(\\\"Hello, World!\\\")\"\n      ]\n    },\n    {\n      \"chapterNumber\": 2,\n      \"chapterTitle\": \"Data Types and Variables\",\n      \"chapterSummary\": \"This chapter covers fundamental data types in Python (integers, floats, strings, booleans) and how to store data using variables. It explains variable assignment and naming conventions.\",\n      \"topicsCovered\": [\n        \"Data Types: Integers, Floats, Strings, Booleans\",\n        \"Variables: Creating, assigning, and using variables\",\n        \"Naming conventions for variables\",\n        \"Type conversion (casting)\",\n        \"Basic arithmetic operations\",\n        \"String manipulation (concatenation, slicing)\",\n        \"Formatted output using f-strings\"\n      ],\n      \"exampleCode\": [\n        \"age = 30\",\n        \"name = \\\"Alice\\\"\",\n        \"height = 5.9\",\n        \"is_student = True\",\n        \"print(f\\\"Name: {name}, Age: {age}, Height: {height}, Student: {is_student}\\\")\"\n      ]\n    },\n    {\n      \"chapterNumber\": 3,\n      \"chapterTitle\": \"Operators and Expressions\",\n      \"chapterSummary\": \"This chapter delves into different types of operators in Python (arithmetic, comparison, logical, assignment) and how they are used to form expressions. It explains operator precedence and how to evaluate expressions.\",\n      \"topicsCovered\": [\n        \"Arithmetic Operators (+, -, *, /, %, **)\",\n        \"Comparison Operators (==, !=, >, <, >=, <=)\",\n        \"Logical Operators (and, or, not)\",\n        \"Assignment Operators (=, +=, -=, *=, /=)\",\n        \"Operator precedence\",\n        \"Evaluating expressions\"\n      ],\n      \"exampleCode\": [\n        \"x = 10\",\n        \"y = 5\",\n        \"result = x + y * 2\",\n        \"print(result) # Output: 20\",\n        \"is_greater = x > y and x != 10\",\n        \"print(is_greater) # Output: False\"\n      ]\n    },\n    {\n      \"chapterNumber\": 4,\n      \"chapterTitle\": \"Control Flow: Conditional Statements\",\n      \"chapterSummary\": \"This chapter introduces conditional statements (if, elif, else) that allow you to execute different blocks of code based on certain conditions. It explains how to use comparison and logical operators to create conditional expressions.\",\n      \"topicsCovered\": [\n        \"The `if` statement\",\n        \"The `else` statement\",\n        \"The `elif` statement\",\n        \"Nested `if` statements\",\n        \"Using comparison and logical operators in conditions\"\n      ],\n      \"exampleCode\": [\n        \"age = 18\",\n        \"if age >= 18:\",\n        \"    print(\\\"You are an adult.\\\")\",\n        \"else:\",\n        \"    print(\\\"You are a minor.\\\")\"\n      ]\n    },\n    {\n      \"chapterNumber\": 5,\n      \"chapterTitle\": \"Control Flow: Loops\",\n      \"chapterSummary\": \"This chapter covers loops (for and while) that allow you to repeatedly execute a block of code. It explains how to iterate over sequences (strings, lists) and how to use control statements (break, continue) to modify loop execution.\",\n      \"topicsCovered\": [\n        \"The `for` loop\",\n        \"Iterating over sequences (strings, lists, ranges)\",\n        \"The `while` loop\",\n        \"The `break` statement\",\n        \"The `continue` statement\",\n        \"Nested loops\"\n      ],\n      \"exampleCode\": [\n        \"for i in range(5):\",\n        \"    print(i)\",\n        \"count = 0\",\n        \"while count < 5:\",\n        \"    print(count)\",\n        \"    count += 1\"\n      ]\n    },\n    {\n      \"chapterNumber\": 6,\n      \"chapterTitle\": \"Lists and Tuples\",\n      \"chapterSummary\": \"This chapter introduces two important data structures in Python: lists and tuples.  It explains how to create, access, modify, and manipulate lists and tuples, including common methods and operations.\",\n      \"topicsCovered\": [\n        \"Lists: Creating, accessing, modifying, and deleting elements\",\n        \"List methods (append, insert, remove, pop, sort, reverse)\",\n        \"List slicing\",\n        \"List comprehensions (basics)\",\n        \"Tuples: Creating, accessing elements (tuples are immutable)\",\n        \"Tuple packing and unpacking\",\n        \"Differences between lists and tuples\"\n      ],\n      \"exampleCode\": [\n        \"my_list = [1, 2, 3, 4, 5]\",\n        \"print(my_list[0]) # Output: 1\",\n        \"my_tuple = (1, 2, 3)\",\n        \"print(my_tuple[0]) # Output: 1\"\n      ]\n    },\n    {\n      \"chapterNumber\": 7,\n      \"chapterTitle\": \"Dictionaries\",\n      \"chapterSummary\": \"This chapter introduces dictionaries, which are key-value pairs. It explains how to create, access, modify, and delete entries in a dictionary.\",\n      \"topicsCovered\": [\n        \"Dictionaries: Creating, accessing, modifying, and deleting key-value pairs\",\n        \"Dictionary methods (get, keys, values, items, update)\",\n        \"Iterating over dictionaries\",\n        \"Checking for key existence\"\n      ],\n      \"exampleCode\": [\n        \"my_dict = {\\\"name\\\": \\\"Bob\\\", \\\"age\\\": 25}\",\n        \"print(my_dict[\\\"name\\\"]) # Output: Bob\",\n        \"my_dict[\\\"city\\\"] = \\\"New York\\\"\"\n      ]\n    },\n    {\n      \"chapterNumber\": 8,\n      \"chapterTitle\": \"Functions\",\n      \"chapterSummary\": \"This chapter introduces the concept of functions and how to define and call them. It covers parameters, return values, scope, and basic function design principles.\",\n      \"topicsCovered\": [\n        \"Defining functions\",\n        \"Calling functions\",\n        \"Parameters and arguments\",\n        \"Return values\",\n        \"Scope (local and global variables)\",\n        \"Default parameter values\",\n        \"Basic function design principles\"\n      ],\n      \"exampleCode\": [\n        \"def greet(name):\",\n        \"    print(f\\\"Hello, {name}!\\\")\",\n        \"greet(\\\"Charlie\\\")\"\n      ]\n    },\n        {\n      \"chapterNumber\": 9,\n      \"chapterTitle\": \"Modules and Libraries\",\n      \"chapterSummary\": \"This chapter gives a basic overview of Python's module and library system, focusing on how to import and use pre-built code to extend Python's capabilities. It provides a brief introduction to the `math` and `random` modules.\",\n      \"topicsCovered\": [\n        \"What are modules and libraries?\",\n        \"The `import` statement\",\n        \"Using the `math` module (e.g., `math.sqrt()`, `math.pi`)\",\n        \"Using the `random` module (e.g., `random.randint()`, `random.random()`)\"\n      ],\n      \"exampleCode\": [\n        \"import math\",\n        \"print(math.sqrt(16)) # Output: 4.0\",\n        \"import random\",\n        \"print(random.randint(1, 10)) # Output: A random integer between 1 and 10\"\n      ]\n    },\n    {\n      \"chapterNumber\": 10,\n      \"chapterTitle\": \"Basic Input and Output\",\n      \"chapterSummary\": \"This chapter teaches how to get input from the user using the `input()` function and how to display output to the console using the `print()` function.  It also introduces basic file handling for reading from and writing to text files.\",\n      \"topicsCovered\": [\n        \"The `input()` function\",\n        \"The `print()` function\",\n        \"Basic file handling: opening, reading, writing, and closing files\",\n        \"Reading from text files\",\n        \"Writing to text files\"\n      ],\n      \"exampleCode\": [\n        \"name = input(\\\"Enter your name: \\\")\",\n        \"print(f\\\"Hello, {name}!\\\")\",\n        \"with open(\\\"my_file.txt\\\", \\\"w\\\") as f:\",\n        \"    f.write(\\\"This is a line in my file.\\\\n\\\")\"\n      ]\n    }\n  ],\n  \"expectedResults\": [\n    \"Understanding of fundamental Python syntax and data types.\",\n    \"Ability to write simple Python programs using control flow (conditional statements and loops).\",\n    \"Knowledge of how to work with lists, tuples, and dictionaries.\",\n    \"Understanding of functions and how to define and call them.\",\n    \"Familiarity with modules and libraries and how to import them.\",\n    \"Ability to get input from the user and display output.\",\n    \"Basic file handling skills (reading and writing to text files).\"\n  ]\n}\n```"},
          ],
        },
      ],
    });
  
    export const generateNotesAiModel = model.startChat({
      generationConfig2,
      history: [
        {
          role: "user",
          parts: [
            {text: "generate exam material detail content for each chapter, Make sure to include all topic point in the content,make sure to give content in HTML format(Do Not Add HTML, Head, Body, Title tag),The chapters:  \"chapters\": [\n    {\n      \"chapterNumber\": 1,\n      \"chapterTitle\": \"Django Setup and Project Structure 🏗️\",\n      \"chapterSummary\": \"This chapter covers the installation of Django and the creation of a new Django project. It also explores the project's directory structure and introduces the essential configuration files.\",\n      \"topicsCovered\": [\n        \"Installing Django\",\n        \"Creating a new Django project\",\n        \"Understanding the project directory structure (manage.py, settings.py, urls.py, wsgi.py, asgi.py)\",\n        \"Configuring settings.py (DEBUG mode, ALLOWED_HOSTS, DATABASES)\",\n        \"Running the development server\"\n      ]\n    },"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```html\n  \n    \n      <h2>Chapter 1: Django Setup and Project Structure </h2>\n      \n      <h3>Topics Covered:</h3>\n      \n        <h4>Installing Django</h4>\n        <ul>\n          <li>Explain the prerequisites for installing Django (e.g., Python, pip).</li>\n          <li>Describe the recommended methods for installing Django (e.g., using `pip`).</li>\n          <li>Demonstrate the command to install Django using `pip`.</li>\n          <li>Troubleshooting common installation errors (e.g., pip not found, permission issues).</li>\n          <li>Verifying the Django installation (e.g., checking the Django version).</li>\n        </ul>\n      \n\n      \n        <h4>Creating a new Django project</h4>\n        <ul>\n          <li>Explain the purpose of creating a Django project.</li>\n          <li>Describe the command used to create a new Django project (`django-admin startproject`).</li>\n          <li>Explain the meaning of the project name and its impact.</li>\n          <li>Discuss the `--template` option and its uses (if applicable).</li>\n          <li>Navigating to the newly created project directory.</li>\n        </ul>\n      \n\n      \n        <h4>Understanding the project directory structure (manage.py, settings.py, urls.py, wsgi.py, asgi.py)</h4>\n        <ul>\n          <li><strong>manage.py:</strong>\n            <ul>\n              <li>Explain the purpose of `manage.py` as a command-line utility for project management.</li>\n              <li>Describe common commands used with `manage.py` (e.g., `runserver`, `migrate`, `createsuperuser`).</li>\n            </ul>\n          </li>\n          <li><strong>settings.py:</strong>\n            <ul>\n              <li>Explain the purpose of `settings.py` for configuring the Django project.</li>\n              <li>Discuss the importance of different settings variables.</li>\n            </ul>\n          </li>\n          <li><strong>urls.py (project-level):</strong>\n            <ul>\n              <li>Explain the role of the root `urls.py` in URL routing.</li>\n              <li>Describe how it includes URLs from different apps.</li>\n            </ul>\n          </li>\n          <li><strong>wsgi.py:</strong>\n            <ul>\n              <li>Explain the purpose of `wsgi.py` for deploying the Django project using WSGI.</li>\n              <li>Describe WSGI (Web Server Gateway Interface) in general terms.</li>\n            </ul>\n          </li>\n          <li><strong>asgi.py:</strong>\n            <ul>\n              <li>Explain the purpose of `asgi.py` for deploying the Django project using ASGI (Asynchronous Server Gateway Interface).</li>\n              <li>Describe ASGI and its advantages over WSGI for asynchronous applications (e.g., websockets).</li>\n            </ul>\n          </li>\n        </ul>\n      \n\n      \n        <h4>Configuring settings.py (DEBUG mode, ALLOWED_HOSTS, DATABASES)</h4>\n        <ul>\n          <li><strong>DEBUG mode:</strong>\n            <ul>\n              <li>Explain the purpose of the `DEBUG` setting for development and production environments.</li>\n              <li>Discuss the implications of enabling `DEBUG` in production (security risks).</li>\n              <li>Explain how to enable and disable `DEBUG` mode.</li>\n            </ul>\n          </li>\n          <li><strong>ALLOWED_HOSTS:</strong>\n            <ul>\n              <li>Explain the purpose of `ALLOWED_HOSTS` in preventing HTTP Host header attacks.</li>\n              <li>Describe how to configure `ALLOWED_HOSTS` for development and production environments.</li>\n              <li>Explain the use of `*` as a wildcard (and its security implications).</li>\n            </ul>\n          </li>\n          <li><strong>DATABASES:</strong>\n            <ul>\n              <li>Explain the purpose of the `DATABASES` setting for configuring the database connection.</li>\n              <li>Describe the different database engines supported by Django (e.g., SQLite, PostgreSQL, MySQL).</li>\n              <li>Explain the key parameters for configuring a database connection (e.g., `ENGINE`, `NAME`, `USER`, `PASSWORD`, `HOST`, `PORT`).</li>\n              <li>Configure the default SQLite database connection.</li>\n            </ul>\n          </li>\n        </ul>\n      \n\n      \n        <h4>Running the development server</h4>\n        <ul>\n          <li>Explain the purpose of the development server for testing and development.</li>\n          <li>Describe the command used to start the development server (`python manage.py runserver`).</li>\n          <li>Explain the default port and address used by the development server.</li>\n          <li>Describe how to specify a different port or address for the development server.</li>\n          <li>Accessing the Django welcome page in the browser.</li>\n          <li>Stopping the development server.</li>\n        </ul>\n      \n    \n  \n```"},
          ],
        },
      ],
    });
  
    

    export const GenerateStudyTypeContentAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate the Flashcard on Topic:Flutter Fundamentals, User Interface (UI) Development ,Basic App Navigation in JSON Format with front back content,Maximum 15 "},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n[\n  {\n    \"id\": 1,\n    \"front\": \"What is Flutter?\",\n    \"back\": \"Flutter is a cross-platform UI toolkit developed by Google for building natively compiled applications for mobile, web, and desktop from a single codebase.\"\n  },\n  {\n    \"id\": 2,\n    \"front\": \"What is a Widget in Flutter?\",\n    \"back\": \"A Widget is the basic building block of a Flutter UI. Everything in Flutter is a Widget - from a simple button to the entire screen.\"\n  },\n  {\n    \"id\": 3,\n    \"front\": \"What are the two main types of Widgets?\",\n    \"back\": \"StatelessWidget and StatefulWidget. StatelessWidget doesn't change, StatefulWidget can change its state during runtime.\"\n  },\n  {\n    \"id\": 4,\n    \"front\": \"What is the difference between StatelessWidget and StatefulWidget?\",\n    \"back\": \"StatelessWidget are immutable and cannot be redrawn. StatefulWidget maintains state that can be changed and trigger a rebuild of the Widget.\"\n  },\n  {\n    \"id\": 5,\n    \"front\": \"What is the `build()` method in a Flutter Widget?\",\n    \"back\": \"The `build()` method is the core of every Widget. It describes the part of the user interface represented by this widget.\"\n  },\n  {\n    \"id\": 6,\n    \"front\": \"What is the purpose of `setState()` in Flutter?\",\n    \"back\": \"`setState()` is a method in StatefulWidget that tells the framework that the internal state of the widget has changed, triggering a rebuild of the UI.\"\n  },\n  {\n    \"id\": 7,\n    \"front\": \"What is the `MaterialApp` widget?\",\n    \"back\": \"`MaterialApp` is a core widget that sets up the app's theme, routes, and home page based on Material Design guidelines.\"\n  },\n  {\n    \"id\": 8,\n    \"front\": \"Name some common layout widgets in Flutter.\",\n    \"back\": \"Container, Row, Column, Stack, Center, Padding, Expanded, SizedBox\"\n  },\n  {\n    \"id\": 9,\n    \"front\": \"What is the purpose of the `Container` widget?\",\n    \"back\": \"The `Container` widget is a versatile widget for applying padding, margins, borders, background color, and other visual properties to its child.\"\n  },\n  {\n    \"id\": 10,\n    \"front\": \"How do you navigate between screens in Flutter?\",\n    \"back\": \"Using the `Navigator` widget and its methods like `Navigator.push()` and `Navigator.pop()`.\"\n  },\n  {\n    \"id\": 11,\n    \"front\": \"What is a `Route` in Flutter navigation?\",\n    \"back\": \"A `Route` represents a screen or page in your application.  You can define named routes or use anonymous routes.\"\n  },\n  {\n    \"id\": 12,\n    \"front\": \"What is the difference between `Navigator.push()` and `Navigator.pushReplacement()`?\",\n    \"back\": \"`Navigator.push()` adds a new route on top of the existing ones, while `Navigator.pushReplacement()` replaces the current route with a new one.\"\n  },\n  {\n    \"id\": 13,\n    \"front\": \"How do you pass data to a new screen during navigation?\",\n    \"back\": \"You can pass data as arguments to the route's constructor or using the `arguments` property when pushing the route using `Navigator.pushNamed()`.\"\n  },\n  {\n    \"id\": 14,\n    \"front\": \"How do you handle asynchronous operations in Flutter?\",\n    \"back\": \"Using `Future` objects and `async`/`await` keywords.  These allow you to perform long-running tasks without blocking the main thread.\"\n  },\n    {\n    \"id\": 15,\n    \"front\": \"What is a Flutter Theme?\",\n    \"back\": \"A Flutter Theme defines the overall look and feel of your app, including colors, typography, and other visual styles. You can apply a Theme using the `ThemeData` class.\"\n  }\n]\n```"},
          ],
        },
      ],
    })

    export const GenerateQuizAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "generate quiz on topic: flutter fundamentals, user interface (UI) Development, Basic App Navigation with Question and options along with correct Answers in JSON format"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"quizTitle\": \"Flutter Fundamentals: UI Development & Basic App Navigation\",\n  \"questions\": [\n    {\n      \"questionText\": \"What is Flutter primarily used for?\",\n      \"options\": [\n        \"Building native iOS applications only\",\n        \"Building native Android applications only\",\n        \"Building cross-platform applications for mobile, web, and desktop from a single codebase\",\n        \"Building server-side applications\"\n      ],\n      \"correctAnswer\": \"Building cross-platform applications for mobile, web, and desktop from a single codebase\",\n      \"explanation\": \"Flutter allows developers to write code once and deploy it on multiple platforms, including iOS, Android, web, and desktop.\"\n    },\n    {\n      \"questionText\": \"Which widget is the fundamental building block of the Flutter UI?\",\n      \"options\": [\n        \"Container\",\n        \"View\",\n        \"Widget\",\n        \"Layout\"\n      ],\n      \"correctAnswer\": \"Widget\",\n      \"explanation\": \"Everything in Flutter is a widget. Widgets describe what their view should look like given their current configuration and state.\"\n    },\n    {\n      \"questionText\": \"Which widget is used to add padding around another widget?\",\n      \"options\": [\n        \"Margin\",\n        \"Padding\",\n        \"Spacing\",\n        \"Inset\"\n      ],\n      \"correctAnswer\": \"Padding\",\n      \"explanation\": \"The `Padding` widget adds empty space around its child widget to control spacing and layout.\"\n    },\n    {\n      \"questionText\": \"What is the purpose of the `StatefulWidget` in Flutter?\",\n      \"options\": [\n        \"To create static, unchanging UI elements.\",\n        \"To create UI elements that can change dynamically based on user interaction or data updates.\",\n        \"To define the overall layout of the app.\",\n        \"To handle routing between different screens.\"\n      ],\n      \"correctAnswer\": \"To create UI elements that can change dynamically based on user interaction or data updates.\",\n      \"explanation\": \"`StatefulWidget`s maintain a mutable state that can be updated over time, causing the UI to rebuild and reflect the changes.\"\n    },\n    {\n      \"questionText\": \"Which layout widget arranges its children in a horizontal or vertical line?\",\n      \"options\": [\n        \"Stack\",\n        \"Container\",\n        \"Row/Column\",\n        \"GridView\"\n      ],\n      \"correctAnswer\": \"Row/Column\",\n      \"explanation\": \"`Row` arranges children horizontally, while `Column` arranges them vertically.\"\n    },\n    {\n      \"questionText\": \"What does the `setState()` method do in a `StatefulWidget`?\",\n      \"options\": [\n        \"It rebuilds the entire app.\",\n        \"It forces the widget to re-render its UI.\",\n        \"It navigates to a new screen.\",\n        \"It updates the widget's properties without triggering a rebuild.\"\n      ],\n      \"correctAnswer\": \"It forces the widget to re-render its UI.\",\n      \"explanation\": \"`setState()` notifies the framework that the internal state of the widget has changed, triggering a rebuild of the UI.\"\n    },\n    {\n      \"questionText\": \"Which widget is used to display images in Flutter?\",\n      \"options\": [\n        \"Picture\",\n        \"Image\",\n        \"Icon\",\n        \"Artwork\"\n      ],\n      \"correctAnswer\": \"Image\",\n      \"explanation\": \"The `Image` widget is the standard way to display images from various sources (assets, network, etc.).\"\n    },\n    {\n      \"questionText\": \"What is a 'Route' in Flutter?\",\n      \"options\": [\n        \"A user interface element\",\n        \"A screen or page in the application\",\n        \"A way to define colors\",\n        \"A method to store data\"\n      ],\n      \"correctAnswer\": \"A screen or page in the application\",\n      \"explanation\": \"A Route represents a distinct screen or page that the user can navigate to within the application.\"\n    },\n    {\n      \"questionText\": \"Which method is commonly used to navigate to a new route (screen) in Flutter?\",\n      \"options\": [\n        \"pushRoute()\",\n        \"goToPage()\",\n        \"Navigator.push()\",\n        \"changeScreen()\"\n      ],\n      \"correctAnswer\": \"Navigator.push()\",\n      \"explanation\": \"`Navigator.push()` pushes a new route onto the navigator's stack, making it the active screen.\"\n    },\n    {\n      \"questionText\": \"How do you pass data from one screen to another when navigating using `Navigator.push()`?\",\n      \"options\": [\n        \"Using global variables\",\n        \"Using shared preferences\",\n        \"By passing the data as arguments to the new route during navigation\",\n        \"By using local storage\"\n      ],\n      \"correctAnswer\": \"By passing the data as arguments to the new route during navigation\",\n      \"explanation\": \"You can pass data as arguments to the `MaterialPageRoute` builder function, which the new screen can then access.\"\n    }\n  ]\n}\n```\n"},
          ],
        },
      ],
    });

    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());
  